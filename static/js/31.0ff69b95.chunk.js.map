{"version":3,"sources":["../node_modules/reactstrap/es/FormText.js","pages/ImportTrucksPage.js"],"names":["propTypes","children","prop_types_default","a","node","inline","bool","tag","utils","color","string","className","cssModule","object","FormText_FormText","props","Tag","attributes","Object","objectWithoutPropertiesLoose","classes","classnames_default","react_default","createElement","esm_extends","defaultProps","es_FormText","ImportTrucksPage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rerenderParentCallback","findTrucks","state","xtoken","then","response","setState","objectSpread","data","catch","respError","handleFileInput","event","v","target","files","file","handleSaveChanges","formData","FormData","append","importTrucks","status","msg","message","error","forceUpdate","console","log","downloadFile","csvFileInput","React","createRef","AsyncStorage","getItem","conf","secret","results","obje_results","JSON","parse","user","token","_this2","options","filter","selectableRows","selectableRowsOnClick","filterType","responsive","draggableColumns","enabled","rowsPerPage","selectToolbarPlacement","customToolbarSelect","selectedRows","displayData","setSelectedRows","CustomToolbarSelectTrucks","originalData","Xtoken","downloadOptions","filename","separator","filterOptions","useDisplayedColumnsOnly","useDisplayedRowsOnly","onDownload","buildHead","buildBody","columns","data2","concat","trim","onRowSelectionChange","currentRowsSelected","allRows","rowsSelected","onRowsDelete","rowsDeleted","onChangePage","numberRows","onSearchChange","searchText","onColumnSortChange","column","direction","onViewColumnsChange","action","onFilterChange","filters","onCellClick","cellIndex","rowIndex","onRowClick","rowData","rowState","Page","title","breadcrumbs","name","active","Row","Col","xl","lg","md","Card","CardHeader","length","Alert","CardBody","Form","FormGroup","Label","for","Input","ref","onChange","type","check","row","sm","size","offset","Button","onClick","dist_default","map","item","id","owner","number","company","make","vin","display","Component"],"mappings":"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","file":"static/js/31.0ff69b95.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'small',\n  color: 'muted'\n};\n\nvar FormText = function FormText(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      inline = props.inline,\n      color = props.color,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"inline\", \"color\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, !inline ? 'form-text' : false, color ? \"text-\" + color : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormText.propTypes = propTypes;\nFormText.defaultProps = defaultProps;\nexport default FormText;","import Page from 'components/Page';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormFeedback,\n  FormGroup,\n  FormText,\n  Input,\n  Label,\n  Row,\n  Alert,\n} from 'reactstrap';\nimport { importTrucks, findTrucks} from \"../api/api\";\nimport AsyncStorage from '@callstack/async-storage';\nimport conf from \"../api/config\";\nimport MUIDataTable from \"mui-datatables\";\nimport CustomToolbarSelectTrucks from \"../components/CustomToolbarSelectTrucks\";\nclass ImportTrucksPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          file : '',\n          xtoken:'',\n          msg: '',\n          error: '',\n          downloadFile:true,\n          data: [],\n        };\n        this.csvFileInput = React.createRef();\n        AsyncStorage.getItem(conf.secret)\n        .then((results) => {\n          if( results !== null )\n          {\n            let obje_results = JSON.parse(results);\n            this.setState({\n              ...this.state,\n              xtoken : obje_results.user.token,\n            });\n            findTrucks(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    data:response.data,\n                });\n            }).catch((respError) => {});\n          }\n        })\n        .catch((error) => {\n          console.log('storage error', error);\n        });\n    }\n    componentDidMount() {\n    }\n\n    rerenderParentCallback = () => {\n      findTrucks(this.state.xtoken).then((response) => {\n        this.setState({\n            ...this.state,\n            data:response.data,\n        });\n      }).catch((respError) => {\n      });\n    }\n    \n    handleFileInput = (event) => {\n        const v = event.target.files[0];\n        this.setState({...this.state, file: v,});\n    }\n    handleSaveChanges = () => {\n        const formData = new FormData();\n        formData.append('csv', this.state.file);\n        importTrucks(this.state.xtoken, formData)\n        .then((response) => {\n            if( response.status === 200)\n            {\n                this.setState({\n                    ...this.state,\n                    file : '',\n                    msg: response.message,\n                    data: response.data,\n                    error: '',\n                });\n                this.forceUpdate();\n            }\n            else\n            {\n                this.setState({\n                    ...this.state,\n                    error: response.message,\n                    msg: '',\n                });\n            }\n        })\n        .catch((error) => {\n            this.setState({\n                ...this.state,\n                error: 'Connection error occured',\n            });\n            console.log('error', error);\n        });\n    }\n    render() {\n        const columns = [\n            {\n              name: 'Id',\n              options: {\n                display: false\n              }\n            },\n            {\n              name: 'Oid',\n              options: {\n                display: false\n              }\n            },\n            'Truck No.',\n            'Truck Owner',\n            'Truck Make',\n            'Truck VIN',\n        ];\n\n        const data2 = () => {\n          let rtn = [];\n          this.state.data.map(item => {\n            rtn.push([\n              item.id,\n              item.owner,\n              item.number,\n              item.company,\n              item.make,\n              item.vin,\n            ]);\n          });\n          return rtn;\n        }\n      \n        const options = {\n            filter: true,\n            selectableRows: 'single',\n            selectableRowsOnClick:true,\n            filterType: 'dropdown',\n            responsive: 'vertical',\n            draggableColumns: {\n              enabled: true\n            },\n            rowsPerPage: 5,\n            selectToolbarPlacement: 'replace',\n            customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\n              <CustomToolbarSelectTrucks rerenderParentCallback={this.rerenderParentCallback} selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows}  originalData={this.state.data} Xtoken={this.state.xtoken}/>\n            ),\n            downloadOptions: {\n                filename: 'trucks-excel-format.csv',\n                separator: ';',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true,\n                  useDisplayedRowsOnly: true,\n                }\n            },\n            onDownload: (buildHead, buildBody, columns, data2) => {\n              if (this.state.downloadFile) {\n                let val= `${buildHead(columns)}${buildBody(data2)}`.trim();\n                return val;\n              }\n      \n              return false;\n            },\n            onRowSelectionChange: (currentRowsSelected, allRows, rowsSelected) => {\n              // console.log('currentRowsSelected', currentRowsSelected);\n            },\n            onRowsDelete: rowsDeleted => {\n              // console.log(rowsDeleted, 'were deleted!');\n            },\n            onChangePage: numberRows => {\n              // console.log(numberRows);\n            },\n            onSearchChange: searchText => {\n              // console.log(searchText);\n            },\n            onColumnSortChange: (column, direction) => {\n              // console.log(column, direction);\n            },\n            onViewColumnsChange: (column, action) => {\n              // console.log(column, action);\n            },\n            onFilterChange: (column, filters) => {\n              // console.log(column, filters);\n            },\n            onCellClick: (cellIndex, rowIndex) => {\n              // console.log(cellIndex, rowIndex);\n            },\n            onRowClick: (rowData, rowState) => {\n              // console.log(rowData, rowState);\n            },\n        };\n      return (\n        <Page title=\"Import trucks\" breadcrumbs={[{ name: 'Import', active: true }]}>\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardHeader>Import Trucks</CardHeader>\n                {this.state.error.length > 0 && (\n                    <Alert color=\"danger\">{this.state.error}</Alert>\n                )}\n                {this.state.msg.length > 0 && (\n                    <Alert color=\"success\">{this.state.msg}</Alert>\n                )}\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                  <FormGroup>\n                    <Label for=\"exampleFile\">Upload CSV file</Label>\n                    <Input ref={this.csvFileInput} onChange={this.handleFileInput} type=\"file\" name=\"file\" />\n                    <FormText color=\"muted\">\n                      Upload a CSV file to import trucks. Make sure the file is a valid CSV with <b>number,owner,make,vin</b> as column headers.\n                    </FormText>\n                  </FormGroup>\n                  <FormGroup check row>\n                      <Col sm={{ size: 10, offset: 2 }}>\n                        <Button type=\"button\" onClick={this.handleSaveChanges}>Import trucks</Button>\n                      </Col>\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>            \n          </Row>\n\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                    <MUIDataTable title={'Trucks'}\n                    data={this.state.data.map(item => {\n                      return [\n                        item.id,\n                        item.owner,\n                        item.number,\n                        item.company,\n                        item.make,\n                        item.vin,\n                      ]\n                    })} columns={columns} options={options} />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n    \n        </Page>\n      );\n    }\n}\nexport default ImportTrucksPage;\n"],"sourceRoot":""}