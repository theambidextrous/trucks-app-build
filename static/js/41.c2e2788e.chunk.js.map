{"version":3,"sources":["pages/TrucksPage.js"],"names":["FormPage","props","_this","Object","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","rerenderParentCallback","findTrucks","state","xtoken","then","response","setState","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","data","catch","respError","handleNumberInput","event","v","target","value","number","handleOwnerInput","owner","handleMakeInput","make","handleVinInput","vin","handleSaveChanges","newTruck","status","msg","message","error","forceUpdate","console","log","downloadFile","owners","AsyncStorage","getItem","conf","secret","results","obje_results","JSON","parse","user","token","findOwners","ownerResponse","ownerRespError","_this2","options","filter","selectableRows","selectableRowsOnClick","filterType","responsive","draggableColumns","enabled","rowsPerPage","selectToolbarPlacement","customToolbarSelect","selectedRows","displayData","setSelectedRows","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_components_CustomToolbarSelectTrucks__WEBPACK_IMPORTED_MODULE_23__","originalData","Xtoken","downloadOptions","filename","separator","filterOptions","useDisplayedColumnsOnly","useDisplayedRowsOnly","onDownload","buildHead","buildBody","columns","data2","concat","trim","onRowSelectionChange","currentRowsSelected","allRows","rowsSelected","onRowsDelete","rowsDeleted","onChangePage","numberRows","onSearchChange","searchText","onColumnSortChange","column","direction","onViewColumnsChange","action","onFilterChange","filters","onCellClick","cellIndex","rowIndex","onRowClick","rowData","rowState","components_Page__WEBPACK_IMPORTED_MODULE_6__","title","breadcrumbs","name","active","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","xl","lg","md","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","length","reactstrap__WEBPACK_IMPORTED_MODULE_12__","color","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","for","reactstrap__WEBPACK_IMPORTED_MODULE_17__","onChange","type","placeholder","defaultValue","disabled","map","stt","idx","key","id","company","check","row","sm","size","offset","reactstrap__WEBPACK_IMPORTED_MODULE_18__","onClick","mui_datatables__WEBPACK_IMPORTED_MODULE_22___default","item","display","React","Component"],"mappings":"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","file":"static/js/41.c2e2788e.chunk.js","sourcesContent":["import Page from 'components/Page';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormFeedback,\n  FormGroup,\n  FormText,\n  Input,\n  Label,\n  Row,\n  Alert,\n  Table,\n} from 'reactstrap';\nimport { newTruck, findTrucks, findOwners} from \"../api/api\";\nimport AsyncStorage from '@callstack/async-storage';\nimport conf from \"../api/config\";\nimport MUIDataTable from \"mui-datatables\";\nimport CustomToolbarSelectTrucks from \"../components/CustomToolbarSelectTrucks\";\nclass FormPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          number : '',\n          owner : 'nn',\n          make : '',\n          vin : '',\n          xtoken:'',\n          msg: '',\n          error: '',\n          downloadFile:true,\n          data: [],\n          owners:[],\n        };\n        AsyncStorage.getItem(conf.secret)\n        .then((results) => {\n          if( results !== null )\n          {\n            let obje_results = JSON.parse(results);\n            this.setState({\n              ...this.state,\n              xtoken : obje_results.user.token,\n            });\n            findTrucks(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    data:response.data,\n                });\n            }).catch((respError) => {});\n\n            findOwners(obje_results.user.token).then((ownerResponse) => {\n              this.setState({\n                  ...this.state,\n                  owners:ownerResponse.data,\n              });\n            }).catch((ownerRespError) => {});\n\n          }\n        })\n        .catch((error) => {\n          console.log('storage error', error);\n        });\n    }\n    componentDidMount() {\n    }\n\n    rerenderParentCallback = () => {\n      findTrucks(this.state.xtoken).then((response) => {\n        this.setState({\n            ...this.state,\n            data:response.data,\n        });\n      }).catch((respError) => {\n      });\n    }\n    \n    handleNumberInput = (event) => {\n      const v = event.target.value;\n      this.setState({...this.state, number: v,});\n    }\n    handleOwnerInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, owner: v,});\n    }\n    handleMakeInput = (event) => {\n      const v = event.target.value;\n      this.setState({...this.state, make: v,});\n    }\n    handleVinInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, vin: v,});\n    }\n    handleSaveChanges = () => {\n        // console.log('so far', this.state);\n        newTruck(this.state.xtoken, this.state)\n        .then((response) => {\n            if( response.status === 200)\n            {\n                this.setState({\n                    ...this.state,\n                    number : '',\n                    owner : 'nn',\n                    make : '',\n                    vin : '',\n                    msg: response.message,\n                    data: response.data,\n                    error: '',\n                });\n                this.forceUpdate();\n            }\n            else\n            {\n                this.setState({\n                    ...this.state,\n                    error: response.message,\n                    msg: '',\n                });\n            }\n        })\n        .catch((error) => {\n            this.setState({\n                ...this.state,\n                error: 'Connection error occured',\n            });\n            console.log('error', error);\n        });\n    }\n    render() {\n        const columns = [\n            {\n              name: 'Id',\n              options: {\n                display: false\n              }\n            },\n            {\n              name: 'Oid',\n              options: {\n                display: false\n              }\n            },\n            'Truck No.',\n            'Truck Owner',\n            'Truck Make',\n            'Truck VIN',\n        ];\n\n        const data2 = () => {\n          let rtn = [];\n          this.state.data.map(item => {\n            rtn.push([\n              item.id,\n              item.owner,\n              item.number,\n              item.company,\n              item.make,\n              item.vin,\n            ]);\n          });\n          return rtn;\n        }\n      \n        const options = {\n            filter: true,\n            selectableRows: 'single',\n            selectableRowsOnClick:true,\n            filterType: 'dropdown',\n            responsive: 'vertical',\n            draggableColumns: {\n              enabled: true\n            },\n            rowsPerPage: 5,\n            selectToolbarPlacement: 'replace',\n            customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\n              <CustomToolbarSelectTrucks rerenderParentCallback={this.rerenderParentCallback} selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows}  originalData={this.state.data} Xtoken={this.state.xtoken}/>\n            ),\n            downloadOptions: {\n                filename: 'trucks-excel-format.csv',\n                separator: ';',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true,\n                  useDisplayedRowsOnly: true,\n                }\n            },\n            onDownload: (buildHead, buildBody, columns, data2) => {\n              if (this.state.downloadFile) {\n                let val= `${buildHead(columns)}${buildBody(data2)}`.trim();\n                return val;\n              }\n      \n              return false;\n            },\n            onRowSelectionChange: (currentRowsSelected, allRows, rowsSelected) => {\n              // console.log('currentRowsSelected', currentRowsSelected);\n            },\n            onRowsDelete: rowsDeleted => {\n              // console.log(rowsDeleted, 'were deleted!');\n            },\n            onChangePage: numberRows => {\n              // console.log(numberRows);\n            },\n            onSearchChange: searchText => {\n              // console.log(searchText);\n            },\n            onColumnSortChange: (column, direction) => {\n              // console.log(column, direction);\n            },\n            onViewColumnsChange: (column, action) => {\n              // console.log(column, action);\n            },\n            onFilterChange: (column, filters) => {\n              // console.log(column, filters);\n            },\n            onCellClick: (cellIndex, rowIndex) => {\n              // console.log(cellIndex, rowIndex);\n            },\n            onRowClick: (rowData, rowState) => {\n              // console.log(rowData, rowState);\n            },\n        };\n      return (\n        <Page title=\"Trucks\" breadcrumbs={[{ name: 'Trucks', active: true }]}>\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardHeader>Create Truck</CardHeader>\n                {this.state.error.length > 0 && (\n                    <Alert color=\"danger\">{this.state.error}</Alert>\n                )}\n                {this.state.msg.length > 0 && (\n                    <Alert color=\"success\">{this.state.msg}</Alert>\n                )}\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xl={6} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup>\n                      <Label for=\"exampleEmail\">Truck License Plate Number*</Label>\n                      <Input onChange={this.handleNumberInput}\n                        type=\"text\" \n                        value={this.state.number}\n                        name=\"number\"\n                        placeholder=\"\"\n                      />\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"exampleEmail\">Truck Owner*</Label>\n                      <Input onChange={this.handleOwnerInput} value={this.state.owner} defaultValue={this.state.owner} type=\"select\" name=\"owner\">\n                        <option value=\"nn\" disabled={true}>Select owner</option>\n                        {\n                          this.state.owners.map((stt, idx) => (\n                            <option key={idx} value={stt.id}>{stt.company}</option>\n                          ))\n                        }\n                      </Input>\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"exampleEmail\">Truck Make*</Label>\n                      <Input onChange={this.handleMakeInput}\n                        type=\"text\" \n                        value={this.state.make}\n                        name=\"make\"\n                        placeholder=\"e.g TATA\"\n                      />\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xl={6} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup>\n                      <Label for=\"examplePassword\">Truck VIN*</Label>\n                      <Input onChange={this.handleVinInput}\n                        type=\"text\"\n                        value={this.state.vin}\n                        name=\"vin\"\n                        placeholder=\"\"\n                      />\n                    </FormGroup>\n                    <FormGroup check row>\n                      <Col sm={{ size: 10, offset: 2 }}>\n                        <Button type=\"button\" onClick={this.handleSaveChanges}>Add truck</Button>\n                      </Col>\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                    <MUIDataTable title={'Trucks'}\n                    data={this.state.data.map(item => {\n                      return [\n                        item.id,\n                        item.owner,\n                        item.number,\n                        item.company,\n                        item.make,\n                        item.vin,\n                      ]\n                    })} columns={columns} options={options} />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n    \n        </Page>\n      );\n    }\n}\nexport default FormPage;\n"],"sourceRoot":""}