{"version":3,"sources":["components/Typography.js","components/Page.js","pages/DriverEarningsPage.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","display-1","display-2","display-3","display-4","p","lead","blockquote","Typography","_ref","TypoComp","Tag","tag","className","type","restProps","Object","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","classes","classNames","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","assign","defaultProps","bem","bn","create","Page","title","breadcrumbs","children","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","b","react__WEBPACK_IMPORTED_MODULE_1___default","e","_Typography__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","process","length","map","_ref2","index","name","active","key","DriverEarningsPage","props","_this","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","firstUpper","str","string","toLowerCase","charAt","toUpperCase","slice","handleFromDateInput","event","v","target","value","setState","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","state","from_date","handleToDateInput","to_date","handleDriverInput","driver","handleSaveChanges","preload","findDriverEarning","xtoken","then","response","status","msg","message","data","error","forceUpdate","catch","console","log","downloadFile","drivers","AsyncStorage","getItem","conf","secret","results","obje_results","JSON","parse","user","token","findDrivers","respError","_this2","columns","options","display","customBodyRender","tableMeta","updateValue","react__WEBPACK_IMPORTED_MODULE_7___default","reactstrap__WEBPACK_IMPORTED_MODULE_9__","parseInt","react_moment__WEBPACK_IMPORTED_MODULE_8___default","format","filter","selectableRows","selectableRowsOnClick","filterType","responsive","draggableColumns","enabled","rowsPerPage","selectToolbarPlacement","downloadOptions","filename","separator","filterOptions","useDisplayedColumnsOnly","useDisplayedRowsOnly","onDownload","buildHead","buildBody","data2","concat","trim","onRowSelectionChange","currentRowsSelected","allRows","rowsSelected","onRowsDelete","rowsDeleted","onChangePage","numberRows","onSearchChange","searchText","onColumnSortChange","column","direction","onViewColumnsChange","action","onFilterChange","filters","onCellClick","cellIndex","rowIndex","onRowClick","rowData","rowState","components_Page__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","xl","lg","md","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","components_PageSpinner__WEBPACK_IMPORTED_MODULE_20__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","color","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","reactstrap__WEBPACK_IMPORTED_MODULE_17__","for","reactstrap__WEBPACK_IMPORTED_MODULE_18__","onChange","defaultValue","disabled","stt","idx","id","fname","lname","placeholder","check","row","sm","size","offset","reactstrap__WEBPACK_IMPORTED_MODULE_19__","onClick","mui_datatables__WEBPACK_IMPORTED_MODULE_24___default","item","dlabel","tlabel","rate","rate_type","drate","earning","created_at","React","Component"],"mappings":"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","file":"static/js/37.e9969185.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>{process.env.REACT_APP_NAME}</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","import Page from 'components/Page';\nimport React from 'react';\nimport Moment from 'react-moment';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormFeedback,\n  FormGroup,\n  FormText,\n  Input,\n  Label,\n  Row,\n  Alert,\n  Table,\n} from 'reactstrap';\nimport PageSpinner from 'components/PageSpinner';\nimport { findDriverEarning, findDrivers,} from \"../api/api\";\nimport AsyncStorage from '@callstack/async-storage';\nimport conf from \"../api/config\";\nimport MUIDataTable from \"mui-datatables\";\nclass DriverEarningsPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            driver : 'nn',\n            from_date: '',\n            to_date: '',\n            xtoken:'',\n            msg: '',\n            error: '',\n            downloadFile:true,\n            preload:false,\n            data: [],\n            drivers:[],\n        };\n        AsyncStorage.getItem(conf.secret)\n        .then((results) => {\n          if( results !== null )\n          {\n            let obje_results = JSON.parse(results);\n            this.setState({\n              ...this.state,\n              xtoken : obje_results.user.token,\n            });\n            findDrivers(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    drivers:response.data,\n                });\n            }).catch((respError) => {});\n          }\n        })\n        .catch((error) => {\n          console.log('storage error', error);\n        });\n    }\n    componentDidMount() {\n    }\n\n    firstUpper = (str) => {\n        let string = str.toLowerCase();\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    handleFromDateInput = (event) => {\n      const v = event.target.value;\n      this.setState({...this.state, from_date: v,});\n    }\n    handleToDateInput = (event) => {\n      const v = event.target.value;\n      this.setState({...this.state, to_date: v,});\n    }\n    handleDriverInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, driver: v,});\n    }\n    handleSaveChanges = () => {\n      this.setState({...this.state, preload:true});\n    //   console.log('this state', this.state);\n    findDriverEarning(this.state.xtoken, this.state, this.state.driver)\n      .then((response) => {\n        //   console.log('exp response', response);\n          if( response.status === 200)\n          {\n              this.setState({\n                  ...this.state,\n                  msg: response.message,\n                  data: response.data,\n                  preload:false,\n                  error: '',\n              });\n              this.forceUpdate();\n          }\n          else\n          {\n              this.setState({\n                  ...this.state,\n                  error: response.message,\n                  preload:false,\n                  msg: '',\n              });\n          }\n      })\n      .catch((error) => {\n          this.setState({\n              ...this.state,\n              error: 'Connection error occured',\n              preload:false,\n          });\n          console.log('error', error);\n      });\n    }\n    render() {\n        const columns = [\n            {\n              name: 'Id',\n              options: {\n                display: 'excluded'\n              }\n            },\n            'Driver',\n            'Truck',\n            {\n                name: 'Load rate',\n                options: {\n                    display: true,\n                    customBodyRender: (value, tableMeta, updateValue) => (\n                        <Label>${value}</Label>\n                     )\n                }\n            },\n            {\n              name: 'Driver rate type',\n              options: {\n                display:true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    parseInt(value) === 1 ? (\n                    <Label>Percentage</Label>\n                    ):(\n                        <Label>Fixed amount</Label>\n                    )\n                )\n              }\n            },\n            {\n                name: 'Driver rate',\n                options: {\n                    display: true,\n                    customBodyRender: (value, tableMeta, updateValue) => (\n                        <Label>{value}</Label>\n                     )\n                }\n            },\n            {\n              name: 'Earning',\n              options: {\n                display: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                   <Label>${value}</Label>\n                )\n              },\n            },\n            {\n              name: 'Date Posted',\n              options: {\n                  display: true,\n                  customBodyRender: (value, tableMeta, updateValue) => (\n                    <Moment format=\"YYYY/MM/DD\">{value}</Moment>\n                  )\n              },\n          },\n        ];\n\n        const data2 = () => {\n          let rtn = [];\n          this.state.data.map(item => {\n            rtn.push([\n              item.id,\n              item.dlabel,\n              item.tlabel,\n              item.rate,\n              item.rate_type,\n              item.drate,\n              item.earning,\n              item.created_at,\n            ]);\n          });\n          return rtn;\n        }\n      \n        const options = {\n            filter: true,\n            selectableRows: 'none',\n            selectableRowsOnClick:true,\n            filterType: 'dropdown',\n            responsive: 'vertical',\n            draggableColumns: {\n              enabled: true\n            },\n            rowsPerPage: 5,\n            selectToolbarPlacement: 'replace',\n            downloadOptions: {\n                filename: 'driver-earnings-excel-format.csv',\n                separator: ';',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true,\n                  useDisplayedRowsOnly: true,\n                }\n            },\n            onDownload: (buildHead, buildBody, columns, data2) => {\n              if (this.state.downloadFile) {\n                let val= `${buildHead(columns)}${buildBody(data2)}`.trim();\n                return val;\n              }\n      \n              return false;\n            },\n            onRowSelectionChange: (currentRowsSelected, allRows, rowsSelected) => {\n              // console.log('currentRowsSelected', currentRowsSelected);\n            },\n            onRowsDelete: rowsDeleted => {\n              // console.log(rowsDeleted, 'were deleted!');\n            },\n            onChangePage: numberRows => {\n              // console.log(numberRows);\n            },\n            onSearchChange: searchText => {\n              // console.log(searchText);\n            },\n            onColumnSortChange: (column, direction) => {\n              // console.log(column, direction);\n            },\n            onViewColumnsChange: (column, action) => {\n              // console.log(column, action);\n            },\n            onFilterChange: (column, filters) => {\n              // console.log(column, filters);\n            },\n            onCellClick: (cellIndex, rowIndex) => {\n              // console.log(cellIndex, rowIndex);\n            },\n            onRowClick: (rowData, rowState) => {\n              // console.log(rowData, rowState);\n            },\n        };\n      return (\n        <Page title=\"Driver earnings\" breadcrumbs={[{ name: 'Earnings', active: true }]}>\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardHeader>\n                    Driver Earnings\n                    {this.state.preload && (<PageSpinner/>)}\n                </CardHeader>\n                {this.state.error.length > 0 && (\n                    <Alert color=\"danger\">{this.state.error}</Alert>\n                )}\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xl={3} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup>\n                      <Label for=\"exampleSelect\">Choose driver*</Label>\n                      <Input onChange={this.handleDriverInput} value={this.state.driver} defaultValue={this.state.driver} type=\"select\" name=\"driver\">\n                        <option value=\"nn\" disabled={true}>Select driver</option>\n                        {\n                            this.state.drivers.map((stt, idx) => (\n                                <option key={idx} value={stt.id}>{this.firstUpper(stt.fname) + \"  \" + stt.lname}</option>\n                            ))\n                        }\n                      </Input>\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col xl={3} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup>\n                      <Label for=\"exampleSelect\">Date from*</Label>\n                      <Input onChange={this.handleFromDateInput}\n                        type=\"date\" \n                        value={this.state.from_date}\n                        name=\"fromdate\"\n                        placeholder=\"\"\n                      />\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col xl={3} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup>\n                      <Label for=\"exampleSelect\">Date to*</Label>\n                      <Input onChange={this.handleToDateInput}\n                        type=\"date\" \n                        value={this.state.to_date}\n                        name=\"todate\"\n                        placeholder=\"\"\n                      />\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col xl={3} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup check row>\n                      <Col sm={{ size: 10, offset: 2 }}>\n                        <Button type=\"button\" onClick={this.handleSaveChanges}>Run search</Button>\n                      </Col>\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n        </Row>\n\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                    <MUIDataTable title={'Driver earnings'}\n                    data={this.state.data.map(item => {\n                      return [\n                        item.id,\n                        item.dlabel,\n                        item.tlabel,\n                        item.rate,\n                        item.rate_type,\n                        item.drate,\n                        item.earning,\n                        item.created_at,\n                      ]\n                    })} columns={columns} options={options} />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n    \n        </Page>\n      );\n    }\n}\nexport default DriverEarningsPage;\n"],"sourceRoot":""}