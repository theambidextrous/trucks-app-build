{"version":3,"sources":["pages/ExpensesPage.js"],"names":["FormPage","props","_this","Object","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","isValidEmailAddress","email","test","firstUpper","str","string","toLowerCase","charAt","toUpperCase","slice","rerenderParentCallback","findExpenses","state","xtoken","then","response","setState","_Users_softbucketio_projects_iTruck_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","data","catch","respError","handleTypeInput","event","v","target","value","parseInt","type","showmore","handleTruckInput","truck","handleAmountInput","amount","handleDescriptionInput","description","handleInstallmentInput","installment","handleFrequencyInput","frequency","handleCityInput","city","handleStateInput","handleMscAmountInput","misc_amount","handleSaveChanges","preload","newExpense","status","msg","message","error","forceUpdate","console","log","downloadFile","trucks","groups","AsyncStorage","getItem","conf","secret","results","obje_results","JSON","parse","user","token","findTrucks","findExpGroups","_this2","columns","name","options","display","customBodyRender","tableMeta","updateValue","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_8__","filter","selectableRows","selectableRowsOnClick","filterType","responsive","draggableColumns","enabled","rowsPerPage","selectToolbarPlacement","customToolbarSelect","selectedRows","displayData","setSelectedRows","_components_CustomToolbarSelectExpenses__WEBPACK_IMPORTED_MODULE_25__","originalData","Xtoken","downloadOptions","filename","separator","filterOptions","useDisplayedColumnsOnly","useDisplayedRowsOnly","onDownload","buildHead","buildBody","data2","concat","trim","onRowSelectionChange","currentRowsSelected","allRows","rowsSelected","onRowsDelete","rowsDeleted","onChangePage","numberRows","onSearchChange","searchText","onColumnSortChange","column","direction","onViewColumnsChange","action","onFilterChange","filters","onCellClick","cellIndex","rowIndex","onRowClick","rowData","rowState","components_Page__WEBPACK_IMPORTED_MODULE_6__","title","breadcrumbs","active","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","xl","lg","md","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","components_PageSpinner__WEBPACK_IMPORTED_MODULE_20__","length","reactstrap__WEBPACK_IMPORTED_MODULE_13__","color","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","for","reactstrap__WEBPACK_IMPORTED_MODULE_17__","onChange","defaultValue","disabled","map","stt","idx","key","id","make","number","placeholder","states","abbreviation","check","row","sm","size","offset","reactstrap__WEBPACK_IMPORTED_MODULE_18__","onClick","mui_datatables__WEBPACK_IMPORTED_MODULE_24___default","item","tlabel","glabel","React","Component"],"mappings":"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","file":"static/js/40.292775b4.chunk.js","sourcesContent":["import Page from 'components/Page';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormFeedback,\n  FormGroup,\n  FormText,\n  Input,\n  Label,\n  Row,\n  Alert,\n  Table,\n} from 'reactstrap';\nimport states from \"../api/states\";\nimport PageSpinner from 'components/PageSpinner';\nimport { findExpGroups, findTrucks, findExpenses, newExpense} from \"../api/api\";\nimport AsyncStorage from '@callstack/async-storage';\nimport conf from \"../api/config\";\nimport MUIDataTable from \"mui-datatables\";\nimport CustomToolbarSelectExpenses from \"../components/CustomToolbarSelectExpenses\";\nclass FormPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            type : 'nn',\n            truck : 'nn',\n            amount : '',\n            description:'',\n            installment:'',\n            frequency:'nn',\n            city:'',\n            state:'nn',\n            misc_amount:'',\n            xtoken:'',\n            msg: '',\n            error: '',\n            downloadFile:true,\n            preload:false,\n            showmore:true,\n            data: [],\n            trucks:[],\n            groups:[],\n        };\n        AsyncStorage.getItem(conf.secret)\n        .then((results) => {\n          if( results !== null )\n          {\n            let obje_results = JSON.parse(results);\n            this.setState({\n              ...this.state,\n              xtoken : obje_results.user.token,\n            });\n            findExpenses(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    data:response.data,\n                });\n            }).catch((respError) => {});\n            \n            findTrucks(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    trucks:response.data,\n                });\n            }).catch((respError) => {});\n\n            findExpGroups(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    groups:response.data,\n                });\n            }).catch((respError) => {});\n\n          }\n        })\n        .catch((error) => {\n          console.log('storage error', error);\n        });\n    }\n    componentDidMount() {\n    }\n\n    isValidEmailAddress = (email) => {\n        if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n            return true;\n        }\n        return false;\n    }\n\n    firstUpper = (str) => {\n        let string = str.toLowerCase();\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    rerenderParentCallback = () => {\n      findExpenses(this.state.xtoken).then((response) => {\n        this.setState({\n            ...this.state,\n            data:response.data,\n        });\n      }).catch((respError) => {\n      });\n    }\n    \n    handleTypeInput = (event) => {\n        const v = event.target.value;\n        if( parseInt(v) === 1)\n        {\n            this.setState({...this.state, type: v, showmore:true});\n        }\n        else if( parseInt(v) > 1 )\n        {\n            this.setState({...this.state, type: v, showmore:false});\n        }\n    }\n    handleTruckInput = (event) => {\n      const v = event.target.value;\n      this.setState({...this.state, truck: v,});\n    }\n    handleAmountInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, amount: v,});\n    }\n    handleDescriptionInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, description: v,});\n    }\n    handleInstallmentInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, installment: v,});\n    }\n    handleFrequencyInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, frequency: v,});\n    }\n    handleCityInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, city: v,});\n    }\n    handleStateInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, state: v,});\n    }\n    handleMscAmountInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, misc_amount: v,});\n    }\n    \n    handleSaveChanges = () => {\n        this.setState({ ...this.state, preload:true});\n        newExpense(this.state.xtoken, this.state)\n        .then((response) => {\n            if( response.status === 200)\n            {\n                this.setState({\n                    ...this.state,\n                    type : 'nn',\n                    truck : 'nn',\n                    amount : '',\n                    description:'',\n                    installment:'',\n                    frequency:'nn',\n                    city:'',\n                    state:'nn',\n                    misc_amount:'',\n                    msg: response.message,\n                    data: response.data,\n                    preload:false,\n                    error: '',\n                });\n                this.forceUpdate();\n            }\n            else\n            {\n                this.setState({\n                    ...this.state,\n                    error: response.message,\n                    preload:false,\n                    msg: '',\n                });\n            }\n        })\n        .catch((error) => {\n            this.setState({\n                ...this.state,\n                error: 'Connection error occured',\n                preload:false,\n            });\n            console.log('error', error);\n        });\n    }\n    render() {\n        const columns = [\n            {\n              name: 'Id',\n              options: {\n                display: false\n              }\n            },\n            {\n                name: 'Gid',\n                options: {\n                  display: 'excluded',\n                }\n            },\n            {\n                name: 'Tid',\n                options: {\n                  display: 'excluded',\n                }\n            },\n            'Description',\n            'Truck',\n            {\n              name: 'Amount',\n              options: {\n                display:true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    <Label>${value}</Label>\n                )\n              }\n            },\n            {\n              name: 'Group',\n              options: {\n                display: false\n              }\n            },\n            {\n              name: 'Installment',\n              options: {\n                display:true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    <Label>${value}</Label>\n                )\n              }\n            },\n            {\n              name: 'Frequency',\n              options: {\n                display: true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    <Label>{value}</Label>\n                )\n              },\n            },\n            {\n              name: 'City',\n              options: {\n                display: true,\n              },\n            },\n            {\n              name: 'State',\n              options: {\n                  display: true,\n              },\n            },\n            {\n                name: 'Msc. Amount',\n                options: {\n                    display: true,\n                },\n            },\n        ];\n\n        const data2 = () => {\n          let rtn = [];\n          this.state.data.map(item => {\n            rtn.push([\n              item.id,\n              item.type,\n              item.truck,\n              item.description,\n              item.tlabel,\n              item.amount,\n              item.glabel,\n              item.installment,\n              item.frequency,\n              item.city,\n              item.state,\n              item.misc_amount,\n            ]);\n          });\n          return rtn;\n        }\n      \n        const options = {\n            filter: true,\n            selectableRows: 'single',\n            selectableRowsOnClick:true,\n            filterType: 'dropdown',\n            responsive: 'vertical',\n            draggableColumns: {\n              enabled: true\n            },\n            rowsPerPage: 5,\n            selectToolbarPlacement: 'replace',\n            customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\n              <CustomToolbarSelectExpenses rerenderParentCallback={this.rerenderParentCallback} selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows}  originalData={this.state.data} Xtoken={this.state.xtoken}/>\n            ),\n            downloadOptions: {\n                filename: 'all-expenses-excel-format.csv',\n                separator: ';',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true,\n                  useDisplayedRowsOnly: true,\n                }\n            },\n            onDownload: (buildHead, buildBody, columns, data2) => {\n              if (this.state.downloadFile) {\n                let val= `${buildHead(columns)}${buildBody(data2)}`.trim();\n                return val;\n              }\n      \n              return false;\n            },\n            onRowSelectionChange: (currentRowsSelected, allRows, rowsSelected) => {\n              // console.log('currentRowsSelected', currentRowsSelected);\n            },\n            onRowsDelete: rowsDeleted => {\n              // console.log(rowsDeleted, 'were deleted!');\n            },\n            onChangePage: numberRows => {\n              // console.log(numberRows);\n            },\n            onSearchChange: searchText => {\n              // console.log(searchText);\n            },\n            onColumnSortChange: (column, direction) => {\n              // console.log(column, direction);\n            },\n            onViewColumnsChange: (column, action) => {\n              // console.log(column, action);\n            },\n            onFilterChange: (column, filters) => {\n              // console.log(column, filters);\n            },\n            onCellClick: (cellIndex, rowIndex) => {\n              // console.log(cellIndex, rowIndex);\n            },\n            onRowClick: (rowData, rowState) => {\n              // console.log(rowData, rowState);\n            },\n        };\n      return (\n        <Page title=\"Expenses\" breadcrumbs={[{ name: 'Expenses', active: true }]}>\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardHeader>\n                    Create expense\n                    {this.state.preload && (<PageSpinner/>)}\n                </CardHeader>\n                {this.state.error.length > 0 && (\n                    <Alert color=\"danger\">{this.state.error}</Alert>\n                )}\n                {this.state.msg.length > 0 && (\n                    <Alert color=\"success\">{this.state.msg}</Alert>\n                )}\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xl={4} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup>\n                      <Label for=\"exampleSelect\">Expense type*</Label>\n                      <Input onChange={this.handleTypeInput} value={this.state.type} defaultValue={this.state.type} type=\"select\" name=\"type\">\n                        <option value=\"nn\" disabled={true}>Select type</option>\n                        {\n                            this.state.groups.map((stt, idx) => (\n                                <option key={idx} value={stt.id}>{stt.name}</option>\n                            ))\n                        }\n                      </Input>\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"exampleSelect\">Related truck*</Label>\n                      <Input onChange={this.handleTruckInput} value={this.state.truck} defaultValue={this.state.truck} type=\"select\" name=\"truck\">\n                        <option value=\"nn\" disabled={true}>Select truck</option>\n                        {\n                            this.state.trucks.map((stt, idx) => (\n                                <option key={idx} value={stt.id}>{this.firstUpper(stt.make) + \" - \" + stt.number}</option>\n                            ))\n                        }\n                      </Input>\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"exampleEmail\">Full deduction amount($)*</Label>\n                      <Input onChange={this.handleAmountInput}\n                        type=\"number\" \n                        value={this.state.amount}\n                        name=\"amt\"\n                        placeholder=\"\"\n                      />\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xl={4} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup>\n                      <Label for=\"examplePassword\">Description*</Label>\n                      <Input onChange={this.handleDescriptionInput}\n                        type=\"text\"\n                        value={this.state.description}\n                        name=\"origin\"\n                        placeholder=\"\"\n                      />\n                    </FormGroup>\n                    {this.state.showmore && (\n                        <div>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Installment($)*</Label>\n                                <Input onChange={this.handleInstallmentInput}\n                                type=\"number\" \n                                value={this.state.installment}\n                                name=\"installment\"\n                                placeholder=\"\"\n                                />\n                            </FormGroup>\n                        </div>\n                    )}\n                    { !this.state.showmore && (\n                        <div>\n                            <FormGroup>\n                                <Label for=\"exampleNumber\">City*</Label>\n                                <Input onChange={this.handleCityInput}\n                                    type=\"text\"\n                                    value={this.state.city}\n                                    name=\"rate\"\n                                    id=\"rate\"\n                                    placeholder=\"\"\n                                />\n                            </FormGroup>\n                        </div>\n                    )}\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n    \n            <Col xl={4} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    { this.state.showmore && (\n                        <div>\n                        <FormGroup>\n                        <Label for=\"exampleSelect\">Frequency*</Label>\n                        <Input onChange={this.handleFrequencyInput} value={this.state.frequency} defaultValue={this.state.frequency} type=\"select\" name=\"freq\">\n                            <option value=\"nn\" disabled={true}>Select frequency</option>\n                            <option value=\"Weekly\">Weekly</option>\n                            <option value=\"Monthily\">Monthily</option>\n                        </Input>\n                        </FormGroup>\n                        </div>\n                    )}\n                    { !this.state.showmore && (\n                        <div>\n                          <FormGroup>\n                            <Label for=\"exampleSelect\">State*</Label>\n                            <Input onChange={this.handleStateInput} value={this.state.state} defaultValue={this.state.state} type=\"select\" name=\"state\">\n                                <option value=\"nn\" disabled={true}>Select state</option>\n                                {\n                                  states.data.map((stt, idx) => (\n                                    <option key={idx} value={stt.abbreviation}>{stt.name}</option>\n                                  ))\n                                }\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"exampleNumber\">Misc. Amount($)*</Label>\n                            <Input onChange={this.handleMscAmountInput}\n                            type=\"number\"\n                            value={this.state.misc_amount}\n                            name=\"misc\"\n                            id=\"misc\"\n                            placeholder=\"\"\n                            />\n                        </FormGroup>\n                        </div>\n                    )}\n                    <FormGroup check row>\n                      <Col sm={{ size: 10, offset: 2 }}>\n                        <Button type=\"button\" onClick={this.handleSaveChanges}>Add expense</Button>\n                      </Col>\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n        </Row>\n\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                    <MUIDataTable title={'Expenses'}\n                    data={this.state.data.map(item => {\n                      return [\n                        item.id,\n                        item.type,\n                        item.truck,\n                        item.description,\n                        item.tlabel,\n                        item.amount,\n                        item.glabel,\n                        item.installment,\n                        item.frequency,\n                        item.city,\n                        item.state,\n                        item.misc_amount,\n                      ]\n                    })} columns={columns} options={options} />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n    \n        </Page>\n      );\n    }\n}\nexport default FormPage;\n"],"sourceRoot":""}