{"version":3,"sources":["pages/ExpenseDeductions.js"],"names":["ExpenseDeductions","props","_this","Object","_Users_softbucketio_projects_blueTrux_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_softbucketio_projects_blueTrux_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_softbucketio_projects_blueTrux_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","firstUpper","str","string","toLowerCase","charAt","toUpperCase","slice","rerenderParentCallback","findDeductions","state","xtoken","then","response","setState","_Users_softbucketio_projects_blueTrux_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","data","catch","respError","handleExpenseInput","event","v","target","value","expense","handleDeductedInput","deducted","handlePaymentDateInput","payment_date","handleSaveChanges","preload","newDeduction","status","msg","message","error","forceUpdate","console","log","downloadFile","showmore","expenses","AsyncStorage","getItem","conf","secret","results","obje_results","JSON","parse","user","token","findDeductionsScheduled","_this2","columns","name","options","display","customBodyRender","tableMeta","updateValue","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_8__","filter","selectableRows","selectableRowsOnClick","filterType","responsive","draggableColumns","enabled","rowsPerPage","selectToolbarPlacement","customToolbarSelect","selectedRows","displayData","setSelectedRows","_components_CustomToolbarSelectExpenses__WEBPACK_IMPORTED_MODULE_25__","originalData","Xtoken","downloadOptions","filename","separator","filterOptions","useDisplayedColumnsOnly","useDisplayedRowsOnly","onDownload","buildHead","buildBody","data2","concat","trim","onRowSelectionChange","currentRowsSelected","allRows","rowsSelected","onRowsDelete","rowsDeleted","onChangePage","numberRows","onSearchChange","searchText","onColumnSortChange","column","direction","onViewColumnsChange","action","onFilterChange","filters","onCellClick","cellIndex","rowIndex","onRowClick","rowData","rowState","components_Page__WEBPACK_IMPORTED_MODULE_6__","title","breadcrumbs","active","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","xl","lg","md","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","components_PageSpinner__WEBPACK_IMPORTED_MODULE_20__","length","reactstrap__WEBPACK_IMPORTED_MODULE_13__","color","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","for","reactstrap__WEBPACK_IMPORTED_MODULE_17__","onChange","type","defaultValue","disabled","map","stt","idx","key","id","label","placeholder","check","row","sm","size","offset","reactstrap__WEBPACK_IMPORTED_MODULE_18__","onClick","mui_datatables__WEBPACK_IMPORTED_MODULE_24___default","item","explabel","datelabel","total","paid_sf","bal","React","Component"],"mappings":"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","file":"static/js/29.eecf1b58.chunk.js","sourcesContent":["import Page from 'components/Page';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormFeedback,\n  FormGroup,\n  FormText,\n  Input,\n  Label,\n  Row,\n  Alert,\n  Table,\n} from 'reactstrap';\nimport states from \"../api/states\";\nimport PageSpinner from 'components/PageSpinner';\nimport { newDeduction,findDeductions,editDeduction,findDeductionsScheduled,deleteDeduction } from \"../api/api\";\nimport AsyncStorage from '@callstack/async-storage';\nimport conf from \"../api/config\";\nimport MUIDataTable from \"mui-datatables\";\nimport CustomToolbarSelectExpenses from \"../components/CustomToolbarSelectExpenses\";\nclass ExpenseDeductions extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            expense : 'nn',\n            deducted : '',\n            payment_date : '',\n            xtoken:'',\n            msg: '',\n            error: '',\n            downloadFile:true,\n            preload:false,\n            showmore:true,\n            data: [],\n            expenses:[],\n        };\n        AsyncStorage.getItem(conf.secret)\n        .then((results) => {\n          if( results !== null )\n          {\n            let obje_results = JSON.parse(results);\n            this.setState({\n              ...this.state,\n              xtoken : obje_results.user.token,\n            });\n            findDeductions(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    data:response.data,\n                });\n            }).catch((respError) => {});\n            \n            findDeductionsScheduled(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    expenses:response.data,\n                });\n            }).catch((respError) => {});\n\n          }\n        })\n        .catch((error) => {\n          console.log('storage error', error);\n        });\n    }\n    componentDidMount() {\n    }\n\n\n    firstUpper = (str) => {\n        let string = str.toLowerCase();\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    rerenderParentCallback = () => {\n      findDeductions(this.state.xtoken).then((response) => {\n        this.setState({\n            ...this.state,\n            data:response.data,\n        });\n      }).catch((respError) => {\n      });\n    }\n    \n    handleExpenseInput = (event) => {\n      const v = event.target.value;\n      this.setState({...this.state, expense: v,});\n    }\n    handleDeductedInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, deducted: v,});\n    }\n    handlePaymentDateInput = (event) => {\n        const v = event.target.value;\n        this.setState({...this.state, payment_date: v,});\n    }\n\n    handleSaveChanges = () => {\n        this.setState({ ...this.state, preload:true});\n        newDeduction(this.state.xtoken, this.state)\n        .then((response) => {\n            // console.log('rrrrr', response);\n            if( response.status === 200)\n            {\n                this.setState({\n                    ...this.state,\n                    expense : 'nn',\n                    deducted : '',\n                    payment_date : '',\n                    msg: response.message,\n                    data: response.data,\n                    preload:false,\n                    error: '',\n                });\n                this.forceUpdate();\n            }\n            else\n            {\n                this.setState({\n                    ...this.state,\n                    error: response.message,\n                    preload:false,\n                    msg: '',\n                });\n            }\n        })\n        .catch((error) => {\n            this.setState({\n                ...this.state,\n                error: 'Connection error occured',\n                preload:false,\n            });\n            console.log('error', error);\n        });\n    }\n    render() {\n        const columns = [\n            {\n                name: 'Expense',\n                options: {\n                  display: true,\n                }\n            },\n            {\n              name: 'Payment Date',\n              options: {\n                display:true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    <Label>{value}</Label>\n                )\n              }\n            },\n            {\n              name: 'This installment',\n              options: {\n                display:true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    <Label>${value}</Label>\n                )\n              }\n            },\n            {\n                name: 'Total deduction',\n                options: {\n                    display:true,\n                    customBodyRender: (value, tableMeta, updateValue) => (\n                        <Label>${value}</Label>\n                    )\n                }\n            },\n            {\n                name: 'Sum paid',\n                options: {\n                    display:true,\n                    customBodyRender: (value, tableMeta, updateValue) => (\n                        <Label>${value}</Label>\n                    )\n                }\n            },\n            {\n                name: 'Balance',\n                options: {\n                    display:true,\n                    customBodyRender: (value, tableMeta, updateValue) => (\n                        <Label>${value}</Label>\n                    )\n                }\n            },\n        ];\n\n        const data2 = () => {\n          let rtn = [];\n          this.state.data.map(item => {\n            rtn.push([\n              item.explabel,\n              item.datelabel,\n              item.deducted,\n              item.total,\n              item.paid_sf,\n              item.bal,\n              item.payment_date,\n            ]);\n          });\n          return rtn;\n        }\n      \n        const options = {\n            filter: true,\n            selectableRows: 'none',\n            selectableRowsOnClick:true,\n            filterType: 'dropdown',\n            responsive: 'vertical',\n            draggableColumns: {\n              enabled: true\n            },\n            rowsPerPage: 5,\n            selectToolbarPlacement: 'replace',\n            customToolbarSelect: (selectedRows, displayData, setSelectedRows) => (\n              <CustomToolbarSelectExpenses rerenderParentCallback={this.rerenderParentCallback} selectedRows={selectedRows} displayData={displayData} setSelectedRows={setSelectedRows}  originalData={this.state.data} Xtoken={this.state.xtoken}/>\n            ),\n            downloadOptions: {\n                filename: 'all-expenses-excel-format.csv',\n                separator: ';',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true,\n                  useDisplayedRowsOnly: true,\n                }\n            },\n            onDownload: (buildHead, buildBody, columns, data2) => {\n              if (this.state.downloadFile) {\n                let val= `${buildHead(columns)}${buildBody(data2)}`.trim();\n                return val;\n              }\n      \n              return false;\n            },\n            onRowSelectionChange: (currentRowsSelected, allRows, rowsSelected) => {\n              // console.log('currentRowsSelected', currentRowsSelected);\n            },\n            onRowsDelete: rowsDeleted => {\n              // console.log(rowsDeleted, 'were deleted!');\n            },\n            onChangePage: numberRows => {\n              // console.log(numberRows);\n            },\n            onSearchChange: searchText => {\n              // console.log(searchText);\n            },\n            onColumnSortChange: (column, direction) => {\n              // console.log(column, direction);\n            },\n            onViewColumnsChange: (column, action) => {\n              // console.log(column, action);\n            },\n            onFilterChange: (column, filters) => {\n              // console.log(column, filters);\n            },\n            onCellClick: (cellIndex, rowIndex) => {\n              // console.log(cellIndex, rowIndex);\n            },\n            onRowClick: (rowData, rowState) => {\n              // console.log(rowData, rowState);\n            },\n        };\n      return (\n        <Page title=\"Deductions\" breadcrumbs={[{ name: 'Deductions', active: true }]}>\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardHeader>\n                    Create deduction\n                    {this.state.preload && (<PageSpinner/>)}\n                </CardHeader>\n                {this.state.error.length > 0 && (\n                    <Alert color=\"danger\">{this.state.error}</Alert>\n                )}\n                {this.state.msg.length > 0 && (\n                    <Alert color=\"success\">{this.state.msg}</Alert>\n                )}\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xl={4} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                  <Form>\n                    <FormGroup>\n                      <Label for=\"exampleSelect\">Expense*</Label>\n                      <Input onChange={this.handleExpenseInput} value={this.state.type} defaultValue={this.state.expense} type=\"select\" name=\"type\">\n                        <option value=\"nn\" disabled={true}>Select expense</option>\n                        {\n                            this.state.expenses.map((stt, idx) => (\n                                <option key={idx} value={stt.id}>{stt.label}</option>\n                            ))\n                        }\n                      </Input>\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"examplePassword\">Deduction amount($)*</Label>\n                      <Input onChange={this.handleDeductedInput}\n                        type=\"number\"\n                        value={this.state.deducted}\n                        name=\"origin\"\n                        placeholder=\"\"\n                      />\n                    </FormGroup>  \n                    <FormGroup>\n                      <Label for=\"examplePassword\">Deduction date*</Label>\n                      <Input onChange={this.handlePaymentDateInput}\n                        type=\"date\"\n                        value={this.state.payment_date}\n                        name=\"origin\"\n                        placeholder=\"\"\n                      />\n                    </FormGroup> \n                    <FormGroup check row>\n                      <Col sm={{ size: 10, offset: 2 }}>\n                        <Button type=\"button\" onClick={this.handleSaveChanges}>Add deduction</Button>\n                      </Col>\n                    </FormGroup>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n\n            \n    \n            <Col xl={8} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                    <MUIDataTable title={'Expenses'}\n                    data={this.state.data.map(item => {\n                      return [\n                        item.explabel,\n                        item.datelabel,\n                        item.deducted,\n                        item.total,\n                        item.paid_sf,\n                        item.bal,\n                        item.payment_date,\n                      ]\n                    })} columns={columns} options={options} />\n                </CardBody>\n              </Card>\n            </Col>\n        </Row>\n    \n        </Page>\n      );\n    }\n}\nexport default ExpenseDeductions;\n"],"sourceRoot":""}