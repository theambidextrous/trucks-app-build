{"version":3,"sources":["pages/ReportArchivesPage.js"],"names":["ReportArchivesPage","props","_this","Object","_Users_softbucketio_projects_blueTrux_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_softbucketio_projects_blueTrux_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_softbucketio_projects_blueTrux_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","isValidEmailAddress","email","test","firstUpper","str","string","toLowerCase","charAt","toUpperCase","slice","handleDownload","setState","_Users_softbucketio_projects_blueTrux_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","state","preload","xtoken","msg","error","downloadFile","data","AsyncStorage","getItem","conf","secret","then","results","obje_results","JSON","parse","user","token","findBillingStatus","response","parseInt","expired","window","location","href","catch","er","console","log","findReportArchives","respError","_this2","columns","name","options","display","customBodyRender","value","tableMeta","updateValue","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_8__","components_SourceLink__WEBPACK_IMPORTED_MODULE_16__","target","filter","selectableRows","selectableRowsOnClick","filterType","responsive","draggableColumns","enabled","rowsPerPage","selectToolbarPlacement","downloadOptions","filename","separator","filterOptions","useDisplayedColumnsOnly","useDisplayedRowsOnly","onDownload","buildHead","buildBody","data2","concat","trim","components_Page__WEBPACK_IMPORTED_MODULE_6__","title","breadcrumbs","active","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","xl","lg","md","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","components_PageSpinner__WEBPACK_IMPORTED_MODULE_17__","length","reactstrap__WEBPACK_IMPORTED_MODULE_13__","color","reactstrap__WEBPACK_IMPORTED_MODULE_14__","mui_datatables__WEBPACK_IMPORTED_MODULE_21___default","map","item","id","download","dated","link","React","Component"],"mappings":"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","file":"static/js/32.d85587ff.chunk.js","sourcesContent":["import Page from 'components/Page';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormFeedback,\n  FormGroup,\n  FormText,\n  Input,\n  Label,\n  Row,\n  Alert,\n  Table,\n} from 'reactstrap';\nimport states from \"../api/states\";\nimport SourceLink from 'components/SourceLink';\nimport PageSpinner from 'components/PageSpinner';\nimport {findReportArchives,findBillingStatus} from \"../api/api\";\nimport AsyncStorage from '@callstack/async-storage';\nimport conf from \"../api/config\";\nimport MUIDataTable from \"mui-datatables\";\nimport CustomToolbarSelectExpenses from \"../components/CustomToolbarSelectExpenses\";\nclass ReportArchivesPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            xtoken:'',\n            msg: '',\n            error: '',\n            downloadFile:true,\n            preload:false,\n            data: [],\n        };\n        AsyncStorage.getItem(conf.secret)\n        .then((results) => {\n          if( results !== null )\n          {\n            let obje_results = JSON.parse(results);\n            this.setState({\n              ...this.state,\n              xtoken : obje_results.user.token,\n            });\n            findBillingStatus(obje_results.user.token).then((response) => {\n              if( parseInt(response.expired) === 1 )\n              {\n                window.location.href = '/bills/payment';\n              }\n            }).catch((er) => console.log(er));\n            findReportArchives(obje_results.user.token).then((response) => {\n                this.setState({\n                    ...this.state,\n                    data:response.data,\n                });\n            }).catch((respError) => {});\n\n          }\n        })\n        .catch((error) => {\n          console.log('storage error', error);\n        });\n    }\n    componentDidMount() {\n    }\n    isValidEmailAddress = (email) => {\n        if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n            return true;\n        }\n        return false;\n    }\n    firstUpper = (str) => {\n        let string = str.toLowerCase();\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }  \n    handleDownload = () => {\n        this.setState({ ...this.state, preload:true});\n    }\n    render() {\n        const columns = [\n            {\n              name: 'Id',\n              options: {\n                display: true\n              }\n            },\n            {\n                name: 'Report Name',\n                options: {\n                  display: true,\n                }\n            },\n            {\n                name: 'File Name',\n                options: {\n                  display: true,\n                }\n            },\n            'Generated on',\n            {\n              name: 'Download',\n              options: {\n                display:true,\n                customBodyRender: (value, tableMeta, updateValue) => (\n                    <Label>\n                        <SourceLink target=\"_blank\" href={value}> {\" \"}Download</SourceLink>\n                    </Label>\n                )\n              }\n            },\n        ];\n\n        const data2 = () => {\n          let rtn = [];\n          this.state.data.map(item => {\n            rtn.push([\n              item.id,\n              item.name,\n              item.download,\n              item.dated,\n              item.link,\n            ]);\n          });\n          return rtn;\n        }\n      \n        const options = {\n            filter: true,\n            selectableRows: false,\n            selectableRowsOnClick:true,\n            filterType: 'dropdown',\n            responsive: 'vertical',\n            draggableColumns: {\n              enabled: true\n            },\n            rowsPerPage: 5,\n            selectToolbarPlacement: 'replace',\n            downloadOptions: {\n                filename: 'all-expenses-excel-format.csv',\n                separator: ';',\n                filterOptions: {\n                  useDisplayedColumnsOnly: true,\n                  useDisplayedRowsOnly: true,\n                }\n            },\n            onDownload: (buildHead, buildBody, columns, data2) => {\n              if (this.state.downloadFile) {\n                let val= `${buildHead(columns)}${buildBody(data2)}`.trim();\n                return val;\n              }\n      \n              return false;\n            },\n        };\n      return (\n        <Page title=\"Report Archives\" breadcrumbs={[{ name: 'Archives', active: true }]}>\n          <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardHeader>\n                {this.state.preload && (<PageSpinner/>)}\n                </CardHeader>\n                {this.state.error.length > 0 && (\n                    <Alert color=\"danger\">{this.state.error}</Alert>\n                )}\n                {this.state.msg.length > 0 && (\n                    <Alert color=\"success\">{this.state.msg}</Alert>\n                )}\n              </Card>\n            </Col>\n        </Row>\n        <Row>\n            <Col xl={12} lg={12} md={12}>\n              <Card>\n                <CardBody>\n                    <MUIDataTable title={'Report Archives'}\n                    data={this.state.data.map(item => {\n                      return [\n                        item.id,\n                        item.name,\n                        item.download,\n                        item.dated,\n                        item.link,\n                      ]\n                    })} columns={columns} options={options} />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n    \n        </Page>\n      );\n    }\n}\nexport default ReportArchivesPage;\n"],"sourceRoot":""}